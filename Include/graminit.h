/* Generated by Parser/pgen */

#define single_input 256
#define file_input 257
#define eval_input 258
#define decorator 259
#define decorators 260
#define decorated 261
#define async_funcdef 262
#define funcdef 263
#define parameters 264
#define varargslist 265
#define fpdef 266
#define fplist 267
#define stmt 268
#define simple_stmt 269
#define small_stmt 270
#define expr_stmt 271
#define augassign 272
#define print_stmt 273
#define del_stmt 274
#define pass_stmt 275
#define flow_stmt 276
#define break_stmt 277
#define continue_stmt 278
#define return_stmt 279
#define yield_stmt 280
#define raise_stmt 281
#define import_stmt 282
#define import_name 283
#define import_from 284
#define import_as_name 285
#define dotted_as_name 286
#define import_as_names 287
#define dotted_as_names 288
#define dotted_name 289
#define global_stmt 290
#define exec_stmt 291
#define assert_stmt 292
#define compound_stmt 293
#define async_stmt 294
#define if_stmt 295
#define while_stmt 296
#define for_stmt 297
#define try_stmt 298
#define with_stmt 299
#define with_item 300
#define except_clause 301
#define suite 302
#define testlist_safe 303
#define old_test 304
#define old_lambdef 305
#define test 306
#define or_test 307
#define and_test 308
#define not_test 309
#define comparison 310
#define comp_op 311
#define expr 312
#define xor_expr 313
#define and_expr 314
#define shift_expr 315
#define arith_expr 316
#define term 317
#define factor 318
#define power 319
#define atom_expr 320
#define atom 321
#define listmaker 322
#define testlist_comp 323
#define lambdef 324
#define trailer 325
#define subscriptlist 326
#define subscript 327
#define sliceop 328
#define exprlist 329
#define testlist 330
#define dictorsetmaker 331
#define classdef 332
#define arglist 333
#define argument 334
#define list_iter 335
#define list_for 336
#define list_if 337
#define comp_iter 338
#define comp_for 339
#define comp_if 340
#define testlist1 341
#define encoding_decl 342
#define yield_expr 343
#define yield_arg 344
