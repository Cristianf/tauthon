#! /usr/bin/env python

"""Non-terminal symbols of Python grammar (from "graminit.h")."""

#  This file is automatically generated; please don't muck it up!
#
#  To update the symbols in this file, 'cd' to the top directory of
#  the python source tree after building the interpreter and run:
#
#    ./python Lib/symbol.py

#--start constants--
single_input = 256
file_input = 257
eval_input = 258
decorator = 259
decorators = 260
decorated = 261
async_funcdef = 262
funcdef = 263
parameters = 264
varargslist = 265
fpdef = 266
fplist = 267
stmt = 268
simple_stmt = 269
small_stmt = 270
expr_stmt = 271
augassign = 272
print_stmt = 273
del_stmt = 274
pass_stmt = 275
flow_stmt = 276
break_stmt = 277
continue_stmt = 278
return_stmt = 279
yield_stmt = 280
raise_stmt = 281
import_stmt = 282
import_name = 283
import_from = 284
import_as_name = 285
dotted_as_name = 286
import_as_names = 287
dotted_as_names = 288
dotted_name = 289
global_stmt = 290
exec_stmt = 291
assert_stmt = 292
compound_stmt = 293
async_stmt = 294
if_stmt = 295
while_stmt = 296
for_stmt = 297
try_stmt = 298
with_stmt = 299
with_item = 300
except_clause = 301
suite = 302
testlist_safe = 303
old_test = 304
old_lambdef = 305
test = 306
or_test = 307
and_test = 308
not_test = 309
comparison = 310
comp_op = 311
expr = 312
xor_expr = 313
and_expr = 314
shift_expr = 315
arith_expr = 316
term = 317
factor = 318
power = 319
atom_expr = 320
atom = 321
listmaker = 322
testlist_comp = 323
lambdef = 324
trailer = 325
subscriptlist = 326
subscript = 327
sliceop = 328
exprlist = 329
testlist = 330
dictorsetmaker = 331
classdef = 332
arglist = 333
argument = 334
list_iter = 335
list_for = 336
list_if = 337
comp_iter = 338
comp_for = 339
comp_if = 340
testlist1 = 341
encoding_decl = 342
yield_expr = 343
yield_arg = 344
#--end constants--

sym_name = {}
for _name, _value in globals().items():
    if type(_value) is type(0):
        sym_name[_value] = _name


def main():
    import sys
    import token
    if len(sys.argv) == 1:
        sys.argv = sys.argv + ["Include/graminit.h", "Lib/symbol.py"]
    token.main()

if __name__ == "__main__":
    main()
